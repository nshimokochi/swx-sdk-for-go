/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BaseError struct for BaseError
type BaseError struct {
	Error *BaseErrorError `json:"error,omitempty"`
}

// NewBaseError instantiates a new BaseError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseError() *BaseError {
	this := BaseError{}
	return &this
}

// NewBaseErrorWithDefaults instantiates a new BaseError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseErrorWithDefaults() *BaseError {
	this := BaseError{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *BaseError) GetError() BaseErrorError {
	if o == nil || o.Error == nil {
		var ret BaseErrorError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseError) GetErrorOk() (*BaseErrorError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *BaseError) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given BaseErrorError and assigns it to the Error field.
func (o *BaseError) SetError(v BaseErrorError) {
	o.Error = &v
}

func (o BaseError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableBaseError struct {
	value *BaseError
	isSet bool
}

func (v NullableBaseError) Get() *BaseError {
	return v.value
}

func (v *NullableBaseError) Set(val *BaseError) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseError) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseError(val *BaseError) *NullableBaseError {
	return &NullableBaseError{value: val, isSet: true}
}

func (v NullableBaseError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


