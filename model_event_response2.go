/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventResponse2 struct for EventResponse2
type EventResponse2 struct {
	HighCPU *EventResponse2HighCPU `json:"highCPU,omitempty"`
}

// NewEventResponse2 instantiates a new EventResponse2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventResponse2() *EventResponse2 {
	this := EventResponse2{}
	return &this
}

// NewEventResponse2WithDefaults instantiates a new EventResponse2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventResponse2WithDefaults() *EventResponse2 {
	this := EventResponse2{}
	return &this
}

// GetHighCPU returns the HighCPU field value if set, zero value otherwise.
func (o *EventResponse2) GetHighCPU() EventResponse2HighCPU {
	if o == nil || o.HighCPU == nil {
		var ret EventResponse2HighCPU
		return ret
	}
	return *o.HighCPU
}

// GetHighCPUOk returns a tuple with the HighCPU field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventResponse2) GetHighCPUOk() (*EventResponse2HighCPU, bool) {
	if o == nil || o.HighCPU == nil {
		return nil, false
	}
	return o.HighCPU, true
}

// HasHighCPU returns a boolean if a field has been set.
func (o *EventResponse2) HasHighCPU() bool {
	if o != nil && o.HighCPU != nil {
		return true
	}

	return false
}

// SetHighCPU gets a reference to the given EventResponse2HighCPU and assigns it to the HighCPU field.
func (o *EventResponse2) SetHighCPU(v EventResponse2HighCPU) {
	o.HighCPU = &v
}

func (o EventResponse2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HighCPU != nil {
		toSerialize["highCPU"] = o.HighCPU
	}
	return json.Marshal(toSerialize)
}

type NullableEventResponse2 struct {
	value *EventResponse2
	isSet bool
}

func (v NullableEventResponse2) Get() *EventResponse2 {
	return v.value
}

func (v *NullableEventResponse2) Set(val *EventResponse2) {
	v.value = val
	v.isSet = true
}

func (v NullableEventResponse2) IsSet() bool {
	return v.isSet
}

func (v *NullableEventResponse2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventResponse2(val *EventResponse2) *NullableEventResponse2 {
	return &NullableEventResponse2{value: val, isSet: true}
}

func (v NullableEventResponse2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventResponse2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


