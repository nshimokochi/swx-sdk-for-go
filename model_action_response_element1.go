/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ActionResponseElement1 struct for ActionResponseElement1
type ActionResponseElement1 struct {
	Delay *ActionResponseElement1Delay `json:"delay,omitempty"`
}

// NewActionResponseElement1 instantiates a new ActionResponseElement1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionResponseElement1() *ActionResponseElement1 {
	this := ActionResponseElement1{}
	return &this
}

// NewActionResponseElement1WithDefaults instantiates a new ActionResponseElement1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionResponseElement1WithDefaults() *ActionResponseElement1 {
	this := ActionResponseElement1{}
	return &this
}

// GetDelay returns the Delay field value if set, zero value otherwise.
func (o *ActionResponseElement1) GetDelay() ActionResponseElement1Delay {
	if o == nil || o.Delay == nil {
		var ret ActionResponseElement1Delay
		return ret
	}
	return *o.Delay
}

// GetDelayOk returns a tuple with the Delay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionResponseElement1) GetDelayOk() (*ActionResponseElement1Delay, bool) {
	if o == nil || o.Delay == nil {
		return nil, false
	}
	return o.Delay, true
}

// HasDelay returns a boolean if a field has been set.
func (o *ActionResponseElement1) HasDelay() bool {
	if o != nil && o.Delay != nil {
		return true
	}

	return false
}

// SetDelay gets a reference to the given ActionResponseElement1Delay and assigns it to the Delay field.
func (o *ActionResponseElement1) SetDelay(v ActionResponseElement1Delay) {
	o.Delay = &v
}

func (o ActionResponseElement1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Delay != nil {
		toSerialize["delay"] = o.Delay
	}
	return json.Marshal(toSerialize)
}

type NullableActionResponseElement1 struct {
	value *ActionResponseElement1
	isSet bool
}

func (v NullableActionResponseElement1) Get() *ActionResponseElement1 {
	return v.value
}

func (v *NullableActionResponseElement1) Set(val *ActionResponseElement1) {
	v.value = val
	v.isSet = true
}

func (v NullableActionResponseElement1) IsSet() bool {
	return v.isSet
}

func (v *NullableActionResponseElement1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionResponseElement1(val *ActionResponseElement1) *NullableActionResponseElement1 {
	return &NullableActionResponseElement1{value: val, isSet: true}
}

func (v NullableActionResponseElement1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionResponseElement1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


