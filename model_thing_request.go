/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ThingRequest struct for ThingRequest
type ThingRequest struct {
	Actions *map[string]interface{} `json:"actions,omitempty"`
	Description *string `json:"description,omitempty"`
	Events *map[string]interface{} `json:"events,omitempty"`
	Properties *map[string]interface{} `json:"properties,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewThingRequest instantiates a new ThingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThingRequest() *ThingRequest {
	this := ThingRequest{}
	return &this
}

// NewThingRequestWithDefaults instantiates a new ThingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThingRequestWithDefaults() *ThingRequest {
	this := ThingRequest{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *ThingRequest) GetActions() map[string]interface{} {
	if o == nil || o.Actions == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThingRequest) GetActionsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *ThingRequest) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given map[string]interface{} and assigns it to the Actions field.
func (o *ThingRequest) SetActions(v map[string]interface{}) {
	o.Actions = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ThingRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThingRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ThingRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ThingRequest) SetDescription(v string) {
	o.Description = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *ThingRequest) GetEvents() map[string]interface{} {
	if o == nil || o.Events == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThingRequest) GetEventsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *ThingRequest) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given map[string]interface{} and assigns it to the Events field.
func (o *ThingRequest) SetEvents(v map[string]interface{}) {
	o.Events = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ThingRequest) GetProperties() map[string]interface{} {
	if o == nil || o.Properties == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThingRequest) GetPropertiesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ThingRequest) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]interface{} and assigns it to the Properties field.
func (o *ThingRequest) SetProperties(v map[string]interface{}) {
	o.Properties = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ThingRequest) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThingRequest) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ThingRequest) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ThingRequest) SetTitle(v string) {
	o.Title = &v
}

func (o ThingRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableThingRequest struct {
	value *ThingRequest
	isSet bool
}

func (v NullableThingRequest) Get() *ThingRequest {
	return v.value
}

func (v *NullableThingRequest) Set(val *ThingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableThingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableThingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThingRequest(val *ThingRequest) *NullableThingRequest {
	return &NullableThingRequest{value: val, isSet: true}
}

func (v NullableThingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


