/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ActionRunStatsInput struct for ActionRunStatsInput
type ActionRunStatsInput struct {
	Properties *ActionRunStatsInputProperties `json:"properties,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewActionRunStatsInput instantiates a new ActionRunStatsInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionRunStatsInput() *ActionRunStatsInput {
	this := ActionRunStatsInput{}
	return &this
}

// NewActionRunStatsInputWithDefaults instantiates a new ActionRunStatsInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionRunStatsInputWithDefaults() *ActionRunStatsInput {
	this := ActionRunStatsInput{}
	return &this
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *ActionRunStatsInput) GetProperties() ActionRunStatsInputProperties {
	if o == nil || o.Properties == nil {
		var ret ActionRunStatsInputProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRunStatsInput) GetPropertiesOk() (*ActionRunStatsInputProperties, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *ActionRunStatsInput) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given ActionRunStatsInputProperties and assigns it to the Properties field.
func (o *ActionRunStatsInput) SetProperties(v ActionRunStatsInputProperties) {
	o.Properties = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ActionRunStatsInput) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionRunStatsInput) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ActionRunStatsInput) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ActionRunStatsInput) SetType(v string) {
	o.Type = &v
}

func (o ActionRunStatsInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableActionRunStatsInput struct {
	value *ActionRunStatsInput
	isSet bool
}

func (v NullableActionRunStatsInput) Get() *ActionRunStatsInput {
	return v.value
}

func (v *NullableActionRunStatsInput) Set(val *ActionRunStatsInput) {
	v.value = val
	v.isSet = true
}

func (v NullableActionRunStatsInput) IsSet() bool {
	return v.isSet
}

func (v *NullableActionRunStatsInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionRunStatsInput(val *ActionRunStatsInput) *NullableActionRunStatsInput {
	return &NullableActionRunStatsInput{value: val, isSet: true}
}

func (v NullableActionRunStatsInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionRunStatsInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


