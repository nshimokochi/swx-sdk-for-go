/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateLabel struct for CreateLabel
type CreateLabel struct {
	Color *string `json:"color,omitempty"`
	LabelDescription *string `json:"label_description,omitempty"`
	LabelName *string `json:"label_name,omitempty"`
}

// NewCreateLabel instantiates a new CreateLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateLabel() *CreateLabel {
	this := CreateLabel{}
	return &this
}

// NewCreateLabelWithDefaults instantiates a new CreateLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateLabelWithDefaults() *CreateLabel {
	this := CreateLabel{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *CreateLabel) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLabel) GetColorOk() (*string, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *CreateLabel) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *CreateLabel) SetColor(v string) {
	o.Color = &v
}

// GetLabelDescription returns the LabelDescription field value if set, zero value otherwise.
func (o *CreateLabel) GetLabelDescription() string {
	if o == nil || o.LabelDescription == nil {
		var ret string
		return ret
	}
	return *o.LabelDescription
}

// GetLabelDescriptionOk returns a tuple with the LabelDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLabel) GetLabelDescriptionOk() (*string, bool) {
	if o == nil || o.LabelDescription == nil {
		return nil, false
	}
	return o.LabelDescription, true
}

// HasLabelDescription returns a boolean if a field has been set.
func (o *CreateLabel) HasLabelDescription() bool {
	if o != nil && o.LabelDescription != nil {
		return true
	}

	return false
}

// SetLabelDescription gets a reference to the given string and assigns it to the LabelDescription field.
func (o *CreateLabel) SetLabelDescription(v string) {
	o.LabelDescription = &v
}

// GetLabelName returns the LabelName field value if set, zero value otherwise.
func (o *CreateLabel) GetLabelName() string {
	if o == nil || o.LabelName == nil {
		var ret string
		return ret
	}
	return *o.LabelName
}

// GetLabelNameOk returns a tuple with the LabelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateLabel) GetLabelNameOk() (*string, bool) {
	if o == nil || o.LabelName == nil {
		return nil, false
	}
	return o.LabelName, true
}

// HasLabelName returns a boolean if a field has been set.
func (o *CreateLabel) HasLabelName() bool {
	if o != nil && o.LabelName != nil {
		return true
	}

	return false
}

// SetLabelName gets a reference to the given string and assigns it to the LabelName field.
func (o *CreateLabel) SetLabelName(v string) {
	o.LabelName = &v
}

func (o CreateLabel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if o.LabelDescription != nil {
		toSerialize["label_description"] = o.LabelDescription
	}
	if o.LabelName != nil {
		toSerialize["label_name"] = o.LabelName
	}
	return json.Marshal(toSerialize)
}

type NullableCreateLabel struct {
	value *CreateLabel
	isSet bool
}

func (v NullableCreateLabel) Get() *CreateLabel {
	return v.value
}

func (v *NullableCreateLabel) Set(val *CreateLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateLabel(val *CreateLabel) *NullableCreateLabel {
	return &NullableCreateLabel{value: val, isSet: true}
}

func (v NullableCreateLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


