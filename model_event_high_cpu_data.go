/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventHighCPUData struct for EventHighCPUData
type EventHighCPUData struct {
	Type *string `json:"type,omitempty"`
	Unit *string `json:"unit,omitempty"`
}

// NewEventHighCPUData instantiates a new EventHighCPUData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventHighCPUData() *EventHighCPUData {
	this := EventHighCPUData{}
	return &this
}

// NewEventHighCPUDataWithDefaults instantiates a new EventHighCPUData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventHighCPUDataWithDefaults() *EventHighCPUData {
	this := EventHighCPUData{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventHighCPUData) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventHighCPUData) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventHighCPUData) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventHighCPUData) SetType(v string) {
	o.Type = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *EventHighCPUData) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventHighCPUData) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *EventHighCPUData) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *EventHighCPUData) SetUnit(v string) {
	o.Unit = &v
}

func (o EventHighCPUData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Unit != nil {
		toSerialize["unit"] = o.Unit
	}
	return json.Marshal(toSerialize)
}

type NullableEventHighCPUData struct {
	value *EventHighCPUData
	isSet bool
}

func (v NullableEventHighCPUData) Get() *EventHighCPUData {
	return v.value
}

func (v *NullableEventHighCPUData) Set(val *EventHighCPUData) {
	v.value = val
	v.isSet = true
}

func (v NullableEventHighCPUData) IsSet() bool {
	return v.isSet
}

func (v *NullableEventHighCPUData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventHighCPUData(val *EventHighCPUData) *NullableEventHighCPUData {
	return &NullableEventHighCPUData{value: val, isSet: true}
}

func (v NullableEventHighCPUData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventHighCPUData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


