/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LabelDeleteResponse struct for LabelDeleteResponse
type LabelDeleteResponse struct {
	ErrorLabelBackend *DeleteClusterResponseErrorClusterBackend `json:"error_label_backend,omitempty"`
}

// NewLabelDeleteResponse instantiates a new LabelDeleteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelDeleteResponse() *LabelDeleteResponse {
	this := LabelDeleteResponse{}
	return &this
}

// NewLabelDeleteResponseWithDefaults instantiates a new LabelDeleteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelDeleteResponseWithDefaults() *LabelDeleteResponse {
	this := LabelDeleteResponse{}
	return &this
}

// GetErrorLabelBackend returns the ErrorLabelBackend field value if set, zero value otherwise.
func (o *LabelDeleteResponse) GetErrorLabelBackend() DeleteClusterResponseErrorClusterBackend {
	if o == nil || o.ErrorLabelBackend == nil {
		var ret DeleteClusterResponseErrorClusterBackend
		return ret
	}
	return *o.ErrorLabelBackend
}

// GetErrorLabelBackendOk returns a tuple with the ErrorLabelBackend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelDeleteResponse) GetErrorLabelBackendOk() (*DeleteClusterResponseErrorClusterBackend, bool) {
	if o == nil || o.ErrorLabelBackend == nil {
		return nil, false
	}
	return o.ErrorLabelBackend, true
}

// HasErrorLabelBackend returns a boolean if a field has been set.
func (o *LabelDeleteResponse) HasErrorLabelBackend() bool {
	if o != nil && o.ErrorLabelBackend != nil {
		return true
	}

	return false
}

// SetErrorLabelBackend gets a reference to the given DeleteClusterResponseErrorClusterBackend and assigns it to the ErrorLabelBackend field.
func (o *LabelDeleteResponse) SetErrorLabelBackend(v DeleteClusterResponseErrorClusterBackend) {
	o.ErrorLabelBackend = &v
}

func (o LabelDeleteResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorLabelBackend != nil {
		toSerialize["error_label_backend"] = o.ErrorLabelBackend
	}
	return json.Marshal(toSerialize)
}

type NullableLabelDeleteResponse struct {
	value *LabelDeleteResponse
	isSet bool
}

func (v NullableLabelDeleteResponse) Get() *LabelDeleteResponse {
	return v.value
}

func (v *NullableLabelDeleteResponse) Set(val *LabelDeleteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelDeleteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelDeleteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelDeleteResponse(val *LabelDeleteResponse) *NullableLabelDeleteResponse {
	return &NullableLabelDeleteResponse{value: val, isSet: true}
}

func (v NullableLabelDeleteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelDeleteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


