/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventHighCPU struct for EventHighCPU
type EventHighCPU struct {
	Data *EventHighCPUData `json:"data,omitempty"`
	Description *string `json:"description,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewEventHighCPU instantiates a new EventHighCPU object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventHighCPU() *EventHighCPU {
	this := EventHighCPU{}
	return &this
}

// NewEventHighCPUWithDefaults instantiates a new EventHighCPU object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventHighCPUWithDefaults() *EventHighCPU {
	this := EventHighCPU{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EventHighCPU) GetData() EventHighCPUData {
	if o == nil || o.Data == nil {
		var ret EventHighCPUData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventHighCPU) GetDataOk() (*EventHighCPUData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EventHighCPU) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given EventHighCPUData and assigns it to the Data field.
func (o *EventHighCPU) SetData(v EventHighCPUData) {
	o.Data = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventHighCPU) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventHighCPU) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EventHighCPU) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EventHighCPU) SetDescription(v string) {
	o.Description = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *EventHighCPU) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventHighCPU) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *EventHighCPU) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *EventHighCPU) SetTitle(v string) {
	o.Title = &v
}

func (o EventHighCPU) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableEventHighCPU struct {
	value *EventHighCPU
	isSet bool
}

func (v NullableEventHighCPU) Get() *EventHighCPU {
	return v.value
}

func (v *NullableEventHighCPU) Set(val *EventHighCPU) {
	v.value = val
	v.isSet = true
}

func (v NullableEventHighCPU) IsSet() bool {
	return v.isSet
}

func (v *NullableEventHighCPU) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventHighCPU(val *EventHighCPU) *NullableEventHighCPU {
	return &NullableEventHighCPU{value: val, isSet: true}
}

func (v NullableEventHighCPU) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventHighCPU) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


