/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AppCreation struct for AppCreation
type AppCreation struct {
	// Configuration for `authorization_code` apps. Can be null for type `client_credentials`.
	AuthCodeConfig *AuthCodeConfig `json:"auth_code_config,omitempty"`
	Description *string `json:"description,omitempty"`
	Name string `json:"name"`
	Scopes *string `json:"scopes,omitempty"`
	Type *AppType `json:"type,omitempty"`
}

// NewAppCreation instantiates a new AppCreation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppCreation(name string, ) *AppCreation {
	this := AppCreation{}
	var description string = ""
	this.Description = &description
	this.Name = name
	var scopes string = ""
	this.Scopes = &scopes
	return &this
}

// NewAppCreationWithDefaults instantiates a new AppCreation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppCreationWithDefaults() *AppCreation {
	this := AppCreation{}
	var description string = ""
	this.Description = &description
	var scopes string = ""
	this.Scopes = &scopes
	return &this
}

// GetAuthCodeConfig returns the AuthCodeConfig field value if set, zero value otherwise.
func (o *AppCreation) GetAuthCodeConfig() AuthCodeConfig {
	if o == nil || o.AuthCodeConfig == nil {
		var ret AuthCodeConfig
		return ret
	}
	return *o.AuthCodeConfig
}

// GetAuthCodeConfigOk returns a tuple with the AuthCodeConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppCreation) GetAuthCodeConfigOk() (*AuthCodeConfig, bool) {
	if o == nil || o.AuthCodeConfig == nil {
		return nil, false
	}
	return o.AuthCodeConfig, true
}

// HasAuthCodeConfig returns a boolean if a field has been set.
func (o *AppCreation) HasAuthCodeConfig() bool {
	if o != nil && o.AuthCodeConfig != nil {
		return true
	}

	return false
}

// SetAuthCodeConfig gets a reference to the given AuthCodeConfig and assigns it to the AuthCodeConfig field.
func (o *AppCreation) SetAuthCodeConfig(v AuthCodeConfig) {
	o.AuthCodeConfig = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AppCreation) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppCreation) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AppCreation) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AppCreation) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *AppCreation) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppCreation) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppCreation) SetName(v string) {
	o.Name = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *AppCreation) GetScopes() string {
	if o == nil || o.Scopes == nil {
		var ret string
		return ret
	}
	return *o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppCreation) GetScopesOk() (*string, bool) {
	if o == nil || o.Scopes == nil {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *AppCreation) HasScopes() bool {
	if o != nil && o.Scopes != nil {
		return true
	}

	return false
}

// SetScopes gets a reference to the given string and assigns it to the Scopes field.
func (o *AppCreation) SetScopes(v string) {
	o.Scopes = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AppCreation) GetType() AppType {
	if o == nil || o.Type == nil {
		var ret AppType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppCreation) GetTypeOk() (*AppType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AppCreation) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given AppType and assigns it to the Type field.
func (o *AppCreation) SetType(v AppType) {
	o.Type = &v
}

func (o AppCreation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthCodeConfig != nil {
		toSerialize["auth_code_config"] = o.AuthCodeConfig
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableAppCreation struct {
	value *AppCreation
	isSet bool
}

func (v NullableAppCreation) Get() *AppCreation {
	return v.value
}

func (v *NullableAppCreation) Set(val *AppCreation) {
	v.value = val
	v.isSet = true
}

func (v NullableAppCreation) IsSet() bool {
	return v.isSet
}

func (v *NullableAppCreation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppCreation(val *AppCreation) *NullableAppCreation {
	return &NullableAppCreation{value: val, isSet: true}
}

func (v NullableAppCreation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppCreation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


