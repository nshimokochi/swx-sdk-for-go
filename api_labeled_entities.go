/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// LabeledEntitiesApiService LabeledEntitiesApi service
type LabeledEntitiesApiService service

type ApiSpacesSpaceLabeledEntitiesGetRequest struct {
	ctx _context.Context
	ApiService *LabeledEntitiesApiService
	space string
	entityId *[]string
	labelId *[]string
	labelName *[]string
	entityType *string
	collectionName *string
}

func (r ApiSpacesSpaceLabeledEntitiesGetRequest) EntityId(entityId []string) ApiSpacesSpaceLabeledEntitiesGetRequest {
	r.entityId = &entityId
	return r
}
func (r ApiSpacesSpaceLabeledEntitiesGetRequest) LabelId(labelId []string) ApiSpacesSpaceLabeledEntitiesGetRequest {
	r.labelId = &labelId
	return r
}
func (r ApiSpacesSpaceLabeledEntitiesGetRequest) LabelName(labelName []string) ApiSpacesSpaceLabeledEntitiesGetRequest {
	r.labelName = &labelName
	return r
}
func (r ApiSpacesSpaceLabeledEntitiesGetRequest) EntityType(entityType string) ApiSpacesSpaceLabeledEntitiesGetRequest {
	r.entityType = &entityType
	return r
}
func (r ApiSpacesSpaceLabeledEntitiesGetRequest) CollectionName(collectionName string) ApiSpacesSpaceLabeledEntitiesGetRequest {
	r.collectionName = &collectionName
	return r
}

func (r ApiSpacesSpaceLabeledEntitiesGetRequest) Execute() (LabeledListResponse, *_nethttp.Response, error) {
	return r.ApiService.SpacesSpaceLabeledEntitiesGetExecute(r)
}

/*
 * SpacesSpaceLabeledEntitiesGet Method for SpacesSpaceLabeledEntitiesGet
 * Show entity_ids and their labels. At least one of the following parameters must be present **entity_id, entity_type, label_id, label_name**
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param space
 * @return ApiSpacesSpaceLabeledEntitiesGetRequest
 */
func (a *LabeledEntitiesApiService) SpacesSpaceLabeledEntitiesGet(ctx _context.Context, space string) ApiSpacesSpaceLabeledEntitiesGetRequest {
	return ApiSpacesSpaceLabeledEntitiesGetRequest{
		ApiService: a,
		ctx: ctx,
		space: space,
	}
}

/*
 * Execute executes the request
 * @return LabeledListResponse
 */
func (a *LabeledEntitiesApiService) SpacesSpaceLabeledEntitiesGetExecute(r ApiSpacesSpaceLabeledEntitiesGetRequest) (LabeledListResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  LabeledListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LabeledEntitiesApiService.SpacesSpaceLabeledEntitiesGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/spaces/{space}/labeled-entities"
	localVarPath = strings.Replace(localVarPath, "{"+"space"+"}", _neturl.PathEscape(parameterToString(r.space, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.entityId == nil {
		return localVarReturnValue, nil, reportError("entityId is required and must be specified")
	}
	if r.labelId == nil {
		return localVarReturnValue, nil, reportError("labelId is required and must be specified")
	}
	if r.labelName == nil {
		return localVarReturnValue, nil, reportError("labelName is required and must be specified")
	}
	if r.entityType == nil {
		return localVarReturnValue, nil, reportError("entityType is required and must be specified")
	}

	{
		t := *r.entityId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("entity_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("entity_id", parameterToString(t, "multi"))
		}
	}
	{
		t := *r.labelId
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label_id", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label_id", parameterToString(t, "multi"))
		}
	}
	{
		t := *r.labelName
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("label_name", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("label_name", parameterToString(t, "multi"))
		}
	}
	localVarQueryParams.Add("entity_type", parameterToString(*r.entityType, ""))
	if r.collectionName != nil {
		localVarQueryParams.Add("collection_name", parameterToString(*r.collectionName, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v BadFormedError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v AuthZError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v BaseError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
