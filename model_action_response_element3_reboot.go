/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ActionResponseElement3Reboot struct for ActionResponseElement3Reboot
type ActionResponseElement3Reboot struct {
	Href *string `json:"href,omitempty"`
	Status *string `json:"status,omitempty"`
	TimeRequested *time.Time `json:"timeRequested,omitempty"`
}

// NewActionResponseElement3Reboot instantiates a new ActionResponseElement3Reboot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActionResponseElement3Reboot() *ActionResponseElement3Reboot {
	this := ActionResponseElement3Reboot{}
	return &this
}

// NewActionResponseElement3RebootWithDefaults instantiates a new ActionResponseElement3Reboot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActionResponseElement3RebootWithDefaults() *ActionResponseElement3Reboot {
	this := ActionResponseElement3Reboot{}
	return &this
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *ActionResponseElement3Reboot) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionResponseElement3Reboot) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *ActionResponseElement3Reboot) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *ActionResponseElement3Reboot) SetHref(v string) {
	o.Href = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ActionResponseElement3Reboot) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionResponseElement3Reboot) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ActionResponseElement3Reboot) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ActionResponseElement3Reboot) SetStatus(v string) {
	o.Status = &v
}

// GetTimeRequested returns the TimeRequested field value if set, zero value otherwise.
func (o *ActionResponseElement3Reboot) GetTimeRequested() time.Time {
	if o == nil || o.TimeRequested == nil {
		var ret time.Time
		return ret
	}
	return *o.TimeRequested
}

// GetTimeRequestedOk returns a tuple with the TimeRequested field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActionResponseElement3Reboot) GetTimeRequestedOk() (*time.Time, bool) {
	if o == nil || o.TimeRequested == nil {
		return nil, false
	}
	return o.TimeRequested, true
}

// HasTimeRequested returns a boolean if a field has been set.
func (o *ActionResponseElement3Reboot) HasTimeRequested() bool {
	if o != nil && o.TimeRequested != nil {
		return true
	}

	return false
}

// SetTimeRequested gets a reference to the given time.Time and assigns it to the TimeRequested field.
func (o *ActionResponseElement3Reboot) SetTimeRequested(v time.Time) {
	o.TimeRequested = &v
}

func (o ActionResponseElement3Reboot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.TimeRequested != nil {
		toSerialize["timeRequested"] = o.TimeRequested
	}
	return json.Marshal(toSerialize)
}

type NullableActionResponseElement3Reboot struct {
	value *ActionResponseElement3Reboot
	isSet bool
}

func (v NullableActionResponseElement3Reboot) Get() *ActionResponseElement3Reboot {
	return v.value
}

func (v *NullableActionResponseElement3Reboot) Set(val *ActionResponseElement3Reboot) {
	v.value = val
	v.isSet = true
}

func (v NullableActionResponseElement3Reboot) IsSet() bool {
	return v.isSet
}

func (v *NullableActionResponseElement3Reboot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionResponseElement3Reboot(val *ActionResponseElement3Reboot) *NullableActionResponseElement3Reboot {
	return &NullableActionResponseElement3Reboot{value: val, isSet: true}
}

func (v NullableActionResponseElement3Reboot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionResponseElement3Reboot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


