/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventKubectlLogsData struct for EventKubectlLogsData
type EventKubectlLogsData struct {
	Type *string `json:"type,omitempty"`
}

// NewEventKubectlLogsData instantiates a new EventKubectlLogsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventKubectlLogsData() *EventKubectlLogsData {
	this := EventKubectlLogsData{}
	return &this
}

// NewEventKubectlLogsDataWithDefaults instantiates a new EventKubectlLogsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventKubectlLogsDataWithDefaults() *EventKubectlLogsData {
	this := EventKubectlLogsData{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EventKubectlLogsData) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventKubectlLogsData) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EventKubectlLogsData) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EventKubectlLogsData) SetType(v string) {
	o.Type = &v
}

func (o EventKubectlLogsData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableEventKubectlLogsData struct {
	value *EventKubectlLogsData
	isSet bool
}

func (v NullableEventKubectlLogsData) Get() *EventKubectlLogsData {
	return v.value
}

func (v *NullableEventKubectlLogsData) Set(val *EventKubectlLogsData) {
	v.value = val
	v.isSet = true
}

func (v NullableEventKubectlLogsData) IsSet() bool {
	return v.isSet
}

func (v *NullableEventKubectlLogsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventKubectlLogsData(val *EventKubectlLogsData) *NullableEventKubectlLogsData {
	return &NullableEventKubectlLogsData{value: val, isSet: true}
}

func (v NullableEventKubectlLogsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventKubectlLogsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


