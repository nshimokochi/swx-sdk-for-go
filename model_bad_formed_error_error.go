/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BadFormedErrorError struct for BadFormedErrorError
type BadFormedErrorError struct {
	Message *string `json:"message,omitempty"`
	Status *int32 `json:"status,omitempty"`
}

// NewBadFormedErrorError instantiates a new BadFormedErrorError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBadFormedErrorError() *BadFormedErrorError {
	this := BadFormedErrorError{}
	return &this
}

// NewBadFormedErrorErrorWithDefaults instantiates a new BadFormedErrorError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBadFormedErrorErrorWithDefaults() *BadFormedErrorError {
	this := BadFormedErrorError{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *BadFormedErrorError) GetMessage() string {
	if o == nil || o.Message == nil {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadFormedErrorError) GetMessageOk() (*string, bool) {
	if o == nil || o.Message == nil {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *BadFormedErrorError) HasMessage() bool {
	if o != nil && o.Message != nil {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *BadFormedErrorError) SetMessage(v string) {
	o.Message = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BadFormedErrorError) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BadFormedErrorError) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BadFormedErrorError) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *BadFormedErrorError) SetStatus(v int32) {
	o.Status = &v
}

func (o BadFormedErrorError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableBadFormedErrorError struct {
	value *BadFormedErrorError
	isSet bool
}

func (v NullableBadFormedErrorError) Get() *BadFormedErrorError {
	return v.value
}

func (v *NullableBadFormedErrorError) Set(val *BadFormedErrorError) {
	v.value = val
	v.isSet = true
}

func (v NullableBadFormedErrorError) IsSet() bool {
	return v.isSet
}

func (v *NullableBadFormedErrorError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBadFormedErrorError(val *BadFormedErrorError) *NullableBadFormedErrorError {
	return &NullableBadFormedErrorError{value: val, isSet: true}
}

func (v NullableBadFormedErrorError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBadFormedErrorError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


