/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AuthCodeConfig struct for AuthCodeConfig
type AuthCodeConfig struct {
	AllowedCorsOrigins *[]string `json:"allowed_cors_origins,omitempty"`
	BackchannelLogoutUri *string `json:"backchannel_logout_uri,omitempty"`
	FrontchannelLogoutUri *string `json:"frontchannel_logout_uri,omitempty"`
	PostLogoutRedirectUris *[]string `json:"post_logout_redirect_uris,omitempty"`
	RedirectUris *[]string `json:"redirect_uris,omitempty"`
}

// NewAuthCodeConfig instantiates a new AuthCodeConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthCodeConfig() *AuthCodeConfig {
	this := AuthCodeConfig{}
	var backchannelLogoutUri string = ""
	this.BackchannelLogoutUri = &backchannelLogoutUri
	var frontchannelLogoutUri string = ""
	this.FrontchannelLogoutUri = &frontchannelLogoutUri
	return &this
}

// NewAuthCodeConfigWithDefaults instantiates a new AuthCodeConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthCodeConfigWithDefaults() *AuthCodeConfig {
	this := AuthCodeConfig{}
	var backchannelLogoutUri string = ""
	this.BackchannelLogoutUri = &backchannelLogoutUri
	var frontchannelLogoutUri string = ""
	this.FrontchannelLogoutUri = &frontchannelLogoutUri
	return &this
}

// GetAllowedCorsOrigins returns the AllowedCorsOrigins field value if set, zero value otherwise.
func (o *AuthCodeConfig) GetAllowedCorsOrigins() []string {
	if o == nil || o.AllowedCorsOrigins == nil {
		var ret []string
		return ret
	}
	return *o.AllowedCorsOrigins
}

// GetAllowedCorsOriginsOk returns a tuple with the AllowedCorsOrigins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthCodeConfig) GetAllowedCorsOriginsOk() (*[]string, bool) {
	if o == nil || o.AllowedCorsOrigins == nil {
		return nil, false
	}
	return o.AllowedCorsOrigins, true
}

// HasAllowedCorsOrigins returns a boolean if a field has been set.
func (o *AuthCodeConfig) HasAllowedCorsOrigins() bool {
	if o != nil && o.AllowedCorsOrigins != nil {
		return true
	}

	return false
}

// SetAllowedCorsOrigins gets a reference to the given []string and assigns it to the AllowedCorsOrigins field.
func (o *AuthCodeConfig) SetAllowedCorsOrigins(v []string) {
	o.AllowedCorsOrigins = &v
}

// GetBackchannelLogoutUri returns the BackchannelLogoutUri field value if set, zero value otherwise.
func (o *AuthCodeConfig) GetBackchannelLogoutUri() string {
	if o == nil || o.BackchannelLogoutUri == nil {
		var ret string
		return ret
	}
	return *o.BackchannelLogoutUri
}

// GetBackchannelLogoutUriOk returns a tuple with the BackchannelLogoutUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthCodeConfig) GetBackchannelLogoutUriOk() (*string, bool) {
	if o == nil || o.BackchannelLogoutUri == nil {
		return nil, false
	}
	return o.BackchannelLogoutUri, true
}

// HasBackchannelLogoutUri returns a boolean if a field has been set.
func (o *AuthCodeConfig) HasBackchannelLogoutUri() bool {
	if o != nil && o.BackchannelLogoutUri != nil {
		return true
	}

	return false
}

// SetBackchannelLogoutUri gets a reference to the given string and assigns it to the BackchannelLogoutUri field.
func (o *AuthCodeConfig) SetBackchannelLogoutUri(v string) {
	o.BackchannelLogoutUri = &v
}

// GetFrontchannelLogoutUri returns the FrontchannelLogoutUri field value if set, zero value otherwise.
func (o *AuthCodeConfig) GetFrontchannelLogoutUri() string {
	if o == nil || o.FrontchannelLogoutUri == nil {
		var ret string
		return ret
	}
	return *o.FrontchannelLogoutUri
}

// GetFrontchannelLogoutUriOk returns a tuple with the FrontchannelLogoutUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthCodeConfig) GetFrontchannelLogoutUriOk() (*string, bool) {
	if o == nil || o.FrontchannelLogoutUri == nil {
		return nil, false
	}
	return o.FrontchannelLogoutUri, true
}

// HasFrontchannelLogoutUri returns a boolean if a field has been set.
func (o *AuthCodeConfig) HasFrontchannelLogoutUri() bool {
	if o != nil && o.FrontchannelLogoutUri != nil {
		return true
	}

	return false
}

// SetFrontchannelLogoutUri gets a reference to the given string and assigns it to the FrontchannelLogoutUri field.
func (o *AuthCodeConfig) SetFrontchannelLogoutUri(v string) {
	o.FrontchannelLogoutUri = &v
}

// GetPostLogoutRedirectUris returns the PostLogoutRedirectUris field value if set, zero value otherwise.
func (o *AuthCodeConfig) GetPostLogoutRedirectUris() []string {
	if o == nil || o.PostLogoutRedirectUris == nil {
		var ret []string
		return ret
	}
	return *o.PostLogoutRedirectUris
}

// GetPostLogoutRedirectUrisOk returns a tuple with the PostLogoutRedirectUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthCodeConfig) GetPostLogoutRedirectUrisOk() (*[]string, bool) {
	if o == nil || o.PostLogoutRedirectUris == nil {
		return nil, false
	}
	return o.PostLogoutRedirectUris, true
}

// HasPostLogoutRedirectUris returns a boolean if a field has been set.
func (o *AuthCodeConfig) HasPostLogoutRedirectUris() bool {
	if o != nil && o.PostLogoutRedirectUris != nil {
		return true
	}

	return false
}

// SetPostLogoutRedirectUris gets a reference to the given []string and assigns it to the PostLogoutRedirectUris field.
func (o *AuthCodeConfig) SetPostLogoutRedirectUris(v []string) {
	o.PostLogoutRedirectUris = &v
}

// GetRedirectUris returns the RedirectUris field value if set, zero value otherwise.
func (o *AuthCodeConfig) GetRedirectUris() []string {
	if o == nil || o.RedirectUris == nil {
		var ret []string
		return ret
	}
	return *o.RedirectUris
}

// GetRedirectUrisOk returns a tuple with the RedirectUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthCodeConfig) GetRedirectUrisOk() (*[]string, bool) {
	if o == nil || o.RedirectUris == nil {
		return nil, false
	}
	return o.RedirectUris, true
}

// HasRedirectUris returns a boolean if a field has been set.
func (o *AuthCodeConfig) HasRedirectUris() bool {
	if o != nil && o.RedirectUris != nil {
		return true
	}

	return false
}

// SetRedirectUris gets a reference to the given []string and assigns it to the RedirectUris field.
func (o *AuthCodeConfig) SetRedirectUris(v []string) {
	o.RedirectUris = &v
}

func (o AuthCodeConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedCorsOrigins != nil {
		toSerialize["allowed_cors_origins"] = o.AllowedCorsOrigins
	}
	if o.BackchannelLogoutUri != nil {
		toSerialize["backchannel_logout_uri"] = o.BackchannelLogoutUri
	}
	if o.FrontchannelLogoutUri != nil {
		toSerialize["frontchannel_logout_uri"] = o.FrontchannelLogoutUri
	}
	if o.PostLogoutRedirectUris != nil {
		toSerialize["post_logout_redirect_uris"] = o.PostLogoutRedirectUris
	}
	if o.RedirectUris != nil {
		toSerialize["redirect_uris"] = o.RedirectUris
	}
	return json.Marshal(toSerialize)
}

type NullableAuthCodeConfig struct {
	value *AuthCodeConfig
	isSet bool
}

func (v NullableAuthCodeConfig) Get() *AuthCodeConfig {
	return v.value
}

func (v *NullableAuthCodeConfig) Set(val *AuthCodeConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthCodeConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthCodeConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthCodeConfig(val *AuthCodeConfig) *NullableAuthCodeConfig {
	return &NullableAuthCodeConfig{value: val, isSet: true}
}

func (v NullableAuthCodeConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthCodeConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


