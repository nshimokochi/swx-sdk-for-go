/*
 * Accounts & Users Service - Public API
 *
 * IN PROGRESS->This is the guide to use the different endpoints to manage the clusters.
 *
 * API version: 0.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MQTTAccountPattern3 struct for MQTTAccountPattern3
type MQTTAccountPattern3 struct {
	PatternPub *string `json:"pattern_pub,omitempty"`
	PatternSub *string `json:"pattern_sub,omitempty"`
}

// NewMQTTAccountPattern3 instantiates a new MQTTAccountPattern3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMQTTAccountPattern3() *MQTTAccountPattern3 {
	this := MQTTAccountPattern3{}
	return &this
}

// NewMQTTAccountPattern3WithDefaults instantiates a new MQTTAccountPattern3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMQTTAccountPattern3WithDefaults() *MQTTAccountPattern3 {
	this := MQTTAccountPattern3{}
	return &this
}

// GetPatternPub returns the PatternPub field value if set, zero value otherwise.
func (o *MQTTAccountPattern3) GetPatternPub() string {
	if o == nil || o.PatternPub == nil {
		var ret string
		return ret
	}
	return *o.PatternPub
}

// GetPatternPubOk returns a tuple with the PatternPub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MQTTAccountPattern3) GetPatternPubOk() (*string, bool) {
	if o == nil || o.PatternPub == nil {
		return nil, false
	}
	return o.PatternPub, true
}

// HasPatternPub returns a boolean if a field has been set.
func (o *MQTTAccountPattern3) HasPatternPub() bool {
	if o != nil && o.PatternPub != nil {
		return true
	}

	return false
}

// SetPatternPub gets a reference to the given string and assigns it to the PatternPub field.
func (o *MQTTAccountPattern3) SetPatternPub(v string) {
	o.PatternPub = &v
}

// GetPatternSub returns the PatternSub field value if set, zero value otherwise.
func (o *MQTTAccountPattern3) GetPatternSub() string {
	if o == nil || o.PatternSub == nil {
		var ret string
		return ret
	}
	return *o.PatternSub
}

// GetPatternSubOk returns a tuple with the PatternSub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MQTTAccountPattern3) GetPatternSubOk() (*string, bool) {
	if o == nil || o.PatternSub == nil {
		return nil, false
	}
	return o.PatternSub, true
}

// HasPatternSub returns a boolean if a field has been set.
func (o *MQTTAccountPattern3) HasPatternSub() bool {
	if o != nil && o.PatternSub != nil {
		return true
	}

	return false
}

// SetPatternSub gets a reference to the given string and assigns it to the PatternSub field.
func (o *MQTTAccountPattern3) SetPatternSub(v string) {
	o.PatternSub = &v
}

func (o MQTTAccountPattern3) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PatternPub != nil {
		toSerialize["pattern_pub"] = o.PatternPub
	}
	if o.PatternSub != nil {
		toSerialize["pattern_sub"] = o.PatternSub
	}
	return json.Marshal(toSerialize)
}

type NullableMQTTAccountPattern3 struct {
	value *MQTTAccountPattern3
	isSet bool
}

func (v NullableMQTTAccountPattern3) Get() *MQTTAccountPattern3 {
	return v.value
}

func (v *NullableMQTTAccountPattern3) Set(val *MQTTAccountPattern3) {
	v.value = val
	v.isSet = true
}

func (v NullableMQTTAccountPattern3) IsSet() bool {
	return v.isSet
}

func (v *NullableMQTTAccountPattern3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMQTTAccountPattern3(val *MQTTAccountPattern3) *NullableMQTTAccountPattern3 {
	return &NullableMQTTAccountPattern3{value: val, isSet: true}
}

func (v NullableMQTTAccountPattern3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMQTTAccountPattern3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


